二叉树是一种树形的数据结构
插入，修改，删除，查找时间复杂度跟树的高度有关，最好的情况为O(logn)

二叉树在频繁的更新过程中可能会导致树的高度远大于logn，极端会退化成单链表，时间复杂度退化成O(n)
平衡二叉树可以最大化解决这种情况

完全二叉树：
    定义：除最后一层其他节点都是满的，并且最后一层的节点都是靠左的节点
    用处：由于二叉树可以用链表或者数组存储，完全二叉树的特征可使二叉树用数组先序遍历之顺序存储

平衡二叉树：
    定义：二叉树中的任意节点的左右子树的高度不能相差1，（平衡的意思为左右子树的高度相差不大）
    类如：满二叉树，完全二叉树，红黑树，（伸展树）Sply Tree, (树堆)Treap

红黑树：近似平衡的二叉树，可以不用频繁的重排二叉树，提升性能
    要求：
        1.  根节点是黑色
        2.  每个叶子节点都是黑色的空节点（NIL）,叶子节点不存储数据
        3.  任何相邻的节点不能同时为红色，即红色节点被黑色节点隔开
        4.  每个节点，从该节点到所有可达的子节点路径，都包含相同数目的黑节点


